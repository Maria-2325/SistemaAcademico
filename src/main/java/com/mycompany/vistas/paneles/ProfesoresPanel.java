/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.vistas.paneles;

import javax.swing.table.DefaultTableModel;

import com.mycompany.controladores.ProfesorControlador;
import com.mycompany.iprofesores.Profesor;
// IMPORTS AGREGADOS PARA FUNCIONALIDAD DE ACTUALIZACIÓN
import com.mycompany.vistas.MainWindow;
import com.mycompany.vistas.sistema.ProfesorVista;

/**
 *
 * @author ibarr
 */
public class ProfesoresPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    private ProfesorControlador controlador;

    public ProfesoresPanel(ProfesorControlador controlador) {
        this.controlador = controlador;
        initComponents();
        setBackground(new java.awt.Color(255, 255, 255));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgMainJPanel12 = new javax.swing.JPanel();
        tablaJScrollPanel12 = new javax.swing.JScrollPane();
        tablaDatosPersonaExternaJTable12 = new javax.swing.JTable();
        menuBotonesJPanel12 = new javax.swing.JPanel();
        btnEliminarJButton12 = new javax.swing.JButton();
        btnActualizarJButton12 = new javax.swing.JButton();

        bgMainJPanel12.setBackground(new java.awt.Color(255, 255, 255));

        tablaJScrollPanel12.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N

        tablaDatosPersonaExternaJTable12.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tablaDatosPersonaExternaJTable12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "ID", "Cédula", "Correo Institucionall", "Correo Personal", "Sueldo", "Dedicacion", "Escalafòn"
            }
        ));
        tablaJScrollPanel12.setViewportView(tablaDatosPersonaExternaJTable12);

        menuBotonesJPanel12.setBackground(new java.awt.Color(255, 255, 255));

        btnEliminarJButton12.setText("Eliminar");
        btnEliminarJButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarJButton12MouseClicked(evt);
            }
        });

        btnActualizarJButton12.setText("Actualizar");
        btnActualizarJButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnActualizarJButton12MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout menuBotonesJPanel12Layout = new javax.swing.GroupLayout(menuBotonesJPanel12);
        menuBotonesJPanel12.setLayout(menuBotonesJPanel12Layout);
        menuBotonesJPanel12Layout.setHorizontalGroup(
            menuBotonesJPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuBotonesJPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnActualizarJButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminarJButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        menuBotonesJPanel12Layout.setVerticalGroup(
            menuBotonesJPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuBotonesJPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(menuBotonesJPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnActualizarJButton12)
                    .addComponent(btnEliminarJButton12))
                .addContainerGap())
        );

        javax.swing.GroupLayout bgMainJPanel12Layout = new javax.swing.GroupLayout(bgMainJPanel12);
        bgMainJPanel12.setLayout(bgMainJPanel12Layout);
        bgMainJPanel12Layout.setHorizontalGroup(
            bgMainJPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tablaJScrollPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
            .addGroup(bgMainJPanel12Layout.createSequentialGroup()
                .addComponent(menuBotonesJPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        bgMainJPanel12Layout.setVerticalGroup(
            bgMainJPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgMainJPanel12Layout.createSequentialGroup()
                .addComponent(tablaJScrollPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menuBotonesJPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgMainJPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgMainJPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarJButton12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarJButton12MouseClicked
        // TODO add your handling code here:
        int fila = tablaDatosPersonaExternaJTable12.getSelectedRow();

        if (fila != -1) {
            int confirmacion = javax.swing.JOptionPane.showConfirmDialog(
                this,
                "¿Deseas eliminar este profesor?",
                "Confirmación",
                javax.swing.JOptionPane.YES_NO_OPTION
            );

            if (confirmacion == javax.swing.JOptionPane.YES_OPTION) {
                // OBTENER ID DESDE LA COLUMNA 1 (ÍNDICE 1)
                int id = Integer.parseInt(tablaDatosPersonaExternaJTable12.getValueAt(fila, 1).toString());

                // LLAMAR AL CONTROLADOR
                boolean eliminado = controlador.eliminarProfesor(id);

                if (eliminado) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Profesor eliminado exitosamente.");
                    actualizarTabla(controlador.obtenerProfesores());
                }

            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Selecciona una fila primero.", "Advertencia", javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarJButton12MouseClicked

    private void btnActualizarJButton12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnActualizarJButton12MouseClicked
        // TODO add your handling code here:
        // VERIFICAR QUE SE HAYA SELECCIONADO UNA FILA
        int fila = tablaDatosPersonaExternaJTable12.getSelectedRow();

        if (fila != -1) {
            // OBTENER EL ID DESDE LA COLUMNA 1 (ÍNDICE 1)
            int id = Integer.parseInt(tablaDatosPersonaExternaJTable12.getValueAt(fila, 1).toString());

            // OBTENER EL PROFESOR A ACTUALIZAR
            Profesor profesorAActualizar = controlador.obtenerProfesorPorId(id);

            if (profesorAActualizar != null) {
                // CREAR Y MOSTRAR LA VENTANA DE ACTUALIZACIÓN
                MainWindow mainWindow = (MainWindow) javax.swing.SwingUtilities.getWindowAncestor(this);
                ProfesorVista vistaActualizacion = new ProfesorVista(mainWindow);

                // CONFIGURAR EL MODO DE ACTUALIZACIÓN
                vistaActualizacion.configurarModoActualizacion(profesorAActualizar);

                // MOSTRAR LA VENTANA
                vistaActualizacion.setVisible(true);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "No se pudo obtener los datos del profesor.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Selecciona una fila primero.", "Advertencia", javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnActualizarJButton12MouseClicked

    public void actualizarTabla(Profesor[] profesores) {
        DefaultTableModel modelo = (DefaultTableModel) tablaDatosPersonaExternaJTable12.getModel();
        modelo.setRowCount(0); // LIMPIAR FILAS

        for (Profesor p : profesores) {
            if (p != null) {
                modelo.addRow(new Object[]{
                    p.getNombre(),
                    p.getId(),
                    p.getCedula(),
                    p.getCorreoInstitucional(),
                    p.getCorreoPersonal(),
                    p.getSueldo(),
                    p.getDedicacion(),
                    p.getEscalafon()
                });
            }
        }
    }

    // MÉTODO PARA BUSCAR Y MOSTRAR UN PROFESOR ESPECÍFICO EN LA TABLA
    public void buscarYMostrarProfesor(Profesor profesor) {
        DefaultTableModel modelo = (DefaultTableModel) tablaDatosPersonaExternaJTable12.getModel();
        modelo.setRowCount(0); // LIMPIAR FILAS

        if (profesor != null) {
            modelo.addRow(new Object[]{
                profesor.getNombre(),
                profesor.getId(),
                profesor.getCedula(),
                profesor.getCorreoInstitucional(),
                profesor.getCorreoPersonal(),
                profesor.getSueldo(),
                profesor.getDedicacion(),
                profesor.getEscalafon()
            });
        }
    }

    // MÉTODO PARA RESTAURAR LA VISTA COMPLETA DE PROFESORES
    public void mostrarTodosLosProfesores() {
        actualizarTabla(controlador.obtenerProfesores());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bgMainJPanel12;
    private javax.swing.JButton btnActualizarJButton12;
    private javax.swing.JButton btnEliminarJButton12;
    private javax.swing.JPanel menuBotonesJPanel12;
    private javax.swing.JTable tablaDatosPersonaExternaJTable12;
    private javax.swing.JScrollPane tablaJScrollPanel12;
    // End of variables declaration//GEN-END:variables
}
